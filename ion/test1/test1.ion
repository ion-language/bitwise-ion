//import .subtest1 {subtest1_func1 = func1}
import test1.subtest1 {subtest1_func1 = func1}
import C = libc {printf}
import std {...}

#static_assert('\xFF' == 255)

var esc_test_str = "Hello\nworld\nHex: \x01\x10\xFHello\xFF";

var some_array: int* = (:int*){1, 2, 3};

struct SomeIncompleteType;

var incomplete_ptr: SomeIncompleteType*;
// var incomplete_val: Incomplete;

/* This is a block comment */

/*
This is a
multi-line
block comment
*/

/* This is a /* nested */ block comment */

const PI = 3.14;
const PI2 = PI + PI;

const U8: uint8 = 42;

var c: char = 1;
var uc: uchar = 1;
var sc: schar = 1;

typedef F1 = func();
typedef F2 = func(f: func(int, int): int): int;
typedef F3 = func(f: func());

const N = (:char)42 + 8 != 0;

typedef A = int[1 + 2*sizeof(h())];

var code = """
#include <stdio.h>

int main(int argc, char **argv) {
    printf("Hello, world!\n");
    return 0;
}
""";

struct S1 {
    a: int;
    b: int const;
}

struct S2 {
    s1: S1;
}

func test_packages() {
    subtest1_func1();
}

func test_modify() {
    i := 42;
    #static_assert(typeof(i) == typeof(int));
    p := &i;
    #static_assert(typeof(p) == typeof(:int*));
/*
    p--;
    x := *p++;
    #assert(x == *--p);
    (*p)++;
    (*p)--;
*/
    x: int;
    stk: int[16];
    sp: int* = stk;
    *sp++ = 1;
    *sp++ = 2;
    x = *--sp;
    #assert(x == 2);
    x = *--sp;
    #assert(x == 1);
    #assert(sp == stk);
}

func f10(a: wchar[3]) {
    a[1] = 42;
}

func test_arrays() {
    a: wchar[] = {1, 2, 3};
    // a = a;
    f10(a);
    b := a;
    w1: wchar;
    w2 := w1;
}

func test_loops() {
    // break;
    // continue;
    switch (0) {
    case 1:
        break;
    default:
        if (1) {
            break;
        }
        for (;;) {
            continue;
        }
        // continue;
        // break;
    }
    while (0) {
    }
    for (i := 0; i < 10; i++) {
    }   
    for (;;) {
        break;
    }
    for (i := 0;;) {
        break;
    }
    for (; 0; ) {
    }
    for (i := 0;; i++) {
        break;
    }
    i := 0;
    for (;; i++) {
        break;
    }
}

func test_nonmodifiable() {
    s1: S1;
    s1.a = 0;
    s1[0] = 42;
    //    s1.1 = 42;
    // s1.b = 0;
    // s1 = {};
    s2: S2;
    s2.s1.a = 0;
    // s2.s1.b = 0;
    // s2.s1 = {};
    // s2 = {};
}

struct UartCtrl {
    tx_enable, rx_enable: bool;
}

const UART_CTRL_REG = (:uint32*)0x12345678;

func pack(ctrl: UartCtrl): uint32 {
    return (ctrl.tx_enable & 1) | ((ctrl.rx_enable & 1) << 1);
}

func unpack(word: uint32): UartCtrl {
    return {tx_enable = word & 0b01, rx_enable = (word & 0b10) >> 1};
}

func test_uart() {
    tx_enable := unpack(*UART_CTRL_REG).tx_enable;
    *UART_CTRL_REG = pack({tx_enable = !tx_enable, rx_enable = false});
    ctrl := unpack(*UART_CTRL_REG);
    ctrl.rx_enable = true;
    *UART_CTRL_REG = pack(ctrl);
}

func h(): uchar {
    Vector{x = 1, y = 2}.x = 42;
    v := &Vector{1, 2};
    v.x = 42;
    p := &int{0};
    x := uint{1} + long{2};
    y := +c;
    return uchar(x);
}

func g(u: U): int {
    return u.i;
}

func k(vp: void*, ip: int*) {
    vp = ip;
    ip = vp;
}

func f1() {
    p := &int{0};
    *p = 42;
}

func f3(a: int[]) {
}

typedef U = IntOrPtr;

func example_test(): int {
    return fact_rec(10) == fact_iter(10);
}

union IntOrPtr {
    i: int;
    p: int*;
}

var char_to_escape: char const[256] = {
    ['\0'] = '0',
    ['\n'] = 'n',
    ['\r'] = 'r',
    ['\t'] = 't',
    ['\v'] = 'v',
    ['\b'] = 'b',
    ['\a'] = 'a',
    ['\\'] = '\\',
    ['"'] = '"',
    ['\''] = '\'',
};

var escape_to_char: char const[256] = {
    ['0'] = '\0',
    ['\''] = '\'',
    ['"'] = '"',
    ['\\'] = '\\',
    ['n'] = '\n',
    ['r'] = '\r',
    ['t'] = '\t',
    ['v'] = '\v',
    ['b'] = '\b',
    ['a'] = '\a',
};

var a2: int[] = {1, 2, 3, [10]=4};
// var a3: int[];

func is_even(digit: int): int {
    b := 0;
    switch (digit) {
    case 0, 2, 4, 6, 8:
        b = 1;
    }
    return b;
}

// func f() {
//     u1 := IntOrPtr{i = 42};
//     u2 := IntOrPtr{p = (:int*)42};
//     u1.i = 0;
//     u2.p = (:int*)0;
// }

var i: int;

struct Vector {
    x, y: int;
}

func f2(v: Vector) {
    v = {};
}

func fact_iter(n: int): int {
    r := 1;
    for (i := 0; i <= n; i++) {
        r *= i;
    }
    return r;
}

func fact_rec(n: int): int {
    if (n == 0) {
        return 1;
    } else {
        return n * fact_rec(n-1);
    }
}

const M = 1 + sizeof(p);

var p: T*;

struct T {
    a: int[M];
}

enum Color {
    COLOR_NONE,
    COLOR_RED,
    COLOR_GREEN,
    COLOR_BLUE,
    NUM_COLORS,
}

enum {
    FOO,
    BAR,
}

enum TypedEnum = int8 {
    BAZ,
    QUUX
}

var color_names: char const*[NUM_COLORS] = {
    [COLOR_NONE] = "none",
    [COLOR_RED] = "red",
    [COLOR_GREEN] = "green",
    [COLOR_BLUE] = "blue",
};

func test_enum() {
    a: Color = COLOR_RED;
    b := COLOR_RED;
    c := a + b;
    i: int = a;
    a = i;
    libc.printf("%d %d %d %d\n", COLOR_NONE, COLOR_RED, COLOR_GREEN, COLOR_BLUE);
    d := BAR;
    e := QUUX;
    #static_assert(typeof(e) == typeof(TypedEnum));
    f: TypedEnum;
    f = BAZ;
}

func test_assign() {
    i: int = 0;
    f: float = 3.14;
    p: int* = &i;
    i++;
    i--;
    p++;
    p--;
    p += 1;
    i /= 2;
    i *= 123;
    i %= 3;
    i <<= 1;
    i >>= 2;
    i &= 0xff;
    i |= 0xff00;
    i ^= 0x0ff0;
    // f++;
    // f--;
}

func benchmark(n: int) {
    r := 1;
    for (i := 1; i <= n; i++) {
        r *= i;
    }
}

func va_test(x: int, ...): int {
    return 0;
}

typedef F = func(x: int, ...): int;

func test_lits() {
    f := 3.14;
    d := 3.14d;
    i := 1;
    u := 0xffffffffu;
    l := 1l;
    ul := 1ul;
    ll := 0x100000000ll;
    ull := 0xffffffffffffffffull;
    x1 := 0xffffffff;
    x2 := 4294967295;
    x3 := 0xffffffffffffffff;
    x4 := 0b10101010 + 0b01010101;
    // u = 0b0;
    // u = 0x0;
}

func test_ops() {
    pi := 3.14;
    f := 0.0;
    f = +pi;
    f = -pi;
    n := -1;
    n = ~n;
    f = f * pi + n;
    f = pi / pi;
    n = 3 % 2;
    n = n + (:uchar)1;
    p := &n;
    p = p + 1;
    n = int((p + 1) - p);
    n = n << 1;
    n = n >> 1;
    b := p + 1 > p;
    b = p + 1 >= p;
    b = p + 1 < p;
    b = p + 1 <= p;
    b = p + 1 == p;
    b = 1 > 2;
    b = 1.23 <= pi;
    n = 0xff;
    b = n & ~1;
    b = n & 1;
    b = (n & ~1) ^ 1;
    b = p && pi;
}

const IS_DEBUG = true;

func test_bool() {
    b := false;
    b = true;
    i := 0;
    i = IS_DEBUG;
}

func test_ctrl(): int {
    switch (1) {
    case 0:
        return 0;
    default:
        return 1;
    }
    //    return 0;
}

var j: int const;
var q: int const*;
var cv: Vector const;

func f4(x: char const*) {
}

struct ConstVector {
    x, y: int const;
}

func f5(p: int const*) {
}

func test_convert() {
    a: int const* = 0;
    b: int* = 0;
    a = b;
    p: void* = 0;
    f5(p);
}

func test_const() {
    cv2 := ConstVector{1, 2};
    // cv2 = {};
    i := 0;
    i = 1;
    // j = 0;
    // *q = 0;
    x := cv.x;
    // cv.x = {};
    c := escape_to_char[0];
    c = char_to_escape[c];
    c = esc_test_str[0];
    f4(escape_to_char);
    p := (:char const*)0; // (:int*)0
    p = escape_to_char + 1;
    q := (:char*)escape_to_char;
    c = q['n'];
    // q = escape_to_char;
    p = (:char const*)1;
    // p = 1;
    // i = p;
    i = int(ullong(p));
}

#static_assert(sizeof(int) == 4)

func test_init() {
    x := (:int const)0;
    #static_assert(sizeof(x) == 4);
    y: int;
    y = 0;
    z: int = 42;
    a: int[] = {1, 2, 3};
    // a2: int[];
    // v: void;
    for (i: ullong = 0; i < 10; i++) {
        libc.printf("%llu\n", i);
    }
    b: int[4] = {1, 2, 3, 4};
    b[0] = a[2];
}

func test_sizeof() {
    i := 0;
    n := sizeof(i);
    n = sizeof(int);
    n = sizeof(:int);
    n = sizeof(:int*);
}

func test_cast() {
    p: int* = 0;
    a: uint64 = 0;
    // a = p;
    a = uint64(p);
    // p = a;
    p = (:int*)a;
}

func print_any_value(x: any) {
    switch (x.type) {
    case typeof(int):
        printf("%d", *(:int const*)x.ptr);
    case typeof(float):
        printf("%f", *(:float const*)x.ptr);
    case typeof(:char const*), typeof(:char*):
        printf("%s", *(:char const**)x.ptr);
    default:
        typeinfo := get_typeinfo(x.type);
        if (typeinfo.kind == TYPE_ENUM) {
            value := int64_from_integer({x.ptr, typeinfo.base});
            enum_item: TypeEnumItemInfo*;
            for (i:=0; i < typeinfo.num_enum_items; i++) {
                if (typeinfo.enum_items[i].int_value == value) {
                    enum_item = &typeinfo.enum_items[i];
                }
            }
            if (!enum_item) {
                printf("%lld (undefined enum item)", value);
            } else {
                printf("%lld (%s)", enum_item.int_value, enum_item.name);
            }
        } else {
            printf("<unknown>");
        }
    }
}

func int64_from_integer(x: any) : int64 {
    switch(x.type) {
        case typeof(uint): {
            return *(:uint const*) x.ptr;
        }
        case typeof(int): {
            return *(:int const*) x.ptr;
        }
        case typeof(ulong): {
            return *(:ulong const*) x.ptr;
        }
        case typeof(long): {
            return *(:long const*) x.ptr;
        }
        case typeof(llong): {
            return *(:llong const*) x.ptr;
        }
        case typeof(ullong): {
            return *(:ullong const*) x.ptr;
        }
        default: {
            #assert(false);
            return 0;
        }
    }
}

func print_any(x: any) {
    print_any_value(x);
    printf(": ");
    print_type(x.type);
}

func println_any(x: any) {
    print_any(x);
    printf("\n");
}

func print_typeid(type: typeid) {
    index := typeid_index(type);
    printf("typeid(%d)", index);
}

func print_type(type: typeid) {
    typeinfo := get_typeinfo(type);
    if (!typeinfo) {
        print_typeid(type);
        return;
    }
    switch (typeinfo.kind) {
    case TYPE_PTR:
        print_type(typeinfo.base);
        printf("*");
    case TYPE_CONST:
        print_type(typeinfo.base);
        printf(" const");
    case TYPE_ARRAY:
        print_type(typeinfo.base);
        printf("[%d]", typeinfo.count);
    default:
        if (typeinfo.name) {
            printf("%s", typeinfo.name);
        } else {
            print_typeid(type);
        }
    }
}

// func va_test_short(fmt: char const*, ...short) {
// }

// func va_test_float(fmt: char const*, ...float) {
// }

func println_type(type: typeid) {
    print_type(type);
    printf("\n");
}

func printf_any(fmt: char const*, ...any) {
    args: libc.va_list;
    libc.va_start(args, fmt);
    start := fmt;
    while (*fmt) {
        while (*fmt && *fmt != '%') {
            fmt++;
        }
        if (*fmt == '%') {
            fmt++;
            if (*fmt == 's') {
                printf("%.*s", int(fmt - start - 1), start);
                arg: any;
                libc.va_arg(args, arg);
                print_any_value(arg);
                fmt++;
                start = fmt;
            }
        }
    }
    printf("%.*s", int(fmt - start), start);
    libc.va_end(args);
}

func print_typeinfo(type: typeid) {
    typeinfo := get_typeinfo(type);
    if (!typeinfo) {
        print_typeid(type);
        return;
    }
    printf("<");
    print_type(type);
    printf(" size=%d align=%d", typeinfo.size, typeinfo.align);
    switch (typeinfo.kind) {
    case TYPE_ENUM:
        printf(" enum=");
        print_type(typeinfo.base);
        printf(" { ");
        prefix := "";
        for (i:=0; i<typeinfo.num_enum_items; i++) {
            printf("%s%s=%lld", prefix, typeinfo.enum_items[i].name, typeinfo.enum_items[i].int_value);
            prefix = ", ";
        }
        printf(" }");
    case TYPE_STRUCT, TYPE_UNION:
        printf(" %s={ ", typeinfo.kind == TYPE_STRUCT ? "struct" : "union");
        for (i := 0; i < typeinfo.num_fields; i++) {
            field := typeinfo.fields[i];
            printf("@offset(%d) %s: ", field.offset, field.name);
            print_type(field.type);
            printf("; ");
        }
        printf("}");
    }
    printf(">");
}

func println_typeinfo(type: typeid) {
    print_typeinfo(type);
    printf("\n");
}

var stack: char[1024];
var stack_ptr = stack;

func push(x: any) {
    n := typeid_size(x.type);
    libc.memcpy(stack_ptr, x.ptr, n);
    stack_ptr += n;
}

func test_push() {
    push(42);
    push("Hello");
    push("World");
}

enum Options {
  Options_A,
  Options_B,
  Options_C,
}

func test_typeinfo() {
    i := 42;
    f := 3.14;
    p := NULL;

    // test implicit any
    println_any(i);
    println_any(42);
    println_any({&i, typeof(i)});
    println_any({&f, typeof(f)});
    println_any({&p, typeof(p)});

    printf_any("Hello: %s %s %s\n", 42, 3.14, "Per");

    // test implicit any in initializations:
    temp: any = i;
    println_any(temp);
    temp = 42;
    println_any(temp);

    array_of_any: any[3] = { 42, "Hello", 3, };
    any_of_array: any = (:int[3]){ 42, 3, };

    println_any(array_of_any);
    println_any(any_of_array);

    //...

    println_type(typeof(int));
    println_type(typeof(:int const*));
    println_type(typeof(:int const*[42]));
    println_type(typeof(UartCtrl));

    println_typeinfo(typeof(int));
    println_typeinfo(typeof(UartCtrl));
    println_typeinfo(typeof(:IntOrPtr*));
    println_typeinfo(typeof(IntOrPtr));

    // Demonstrate typeinfos for enums:
    o := Options_B;
    println_any({&o, typeof(o)});
    println_typeinfo(typeof(o));

    o = 32;
    println_any({&o, typeof(o)});

    so := subtest1.SubOptions_I;
    println_any({&so, typeof(so)});
    println_typeinfo(typeof(so));
}

struct Ints {
    num_ints: int;
    int_ptr: int*;
    int_arr: int[3];
}

func test_void() {
    void(42);
}

func test_va_type(fmt: char const*, ...int) {
    // ...
}

func test_va_list(fmt: char const*, ...) {
    init_args: libc.va_list;
    libc.va_start(init_args, fmt);
    args: libc.va_list;
    libc.va_copy(args, init_args);
    libc.va_end(init_args);
    i: int;
    libc.va_arg(args, i);
    ll: llong;
    libc.va_arg(args, ll);
    libc.printf("c=%d i=%d ll=%lld\n", c, i, ll);
    libc.va_end(args);
}

func test_compound_literals() {
    w: Vector*;
    w = &{1, 2};
    a := (:int[]){1, 2, 3};
    i := 42;
    temp: any = i;
    println_any(temp);
    temp = 42;
    println_any(temp);
    n: any = 42;
    x: any const = {&i, typeof(i)};
    y := (:any const){&i, typeof(i)};
    v: Ints = {
    num_ints = 3,
    int_ptr = (:int[]){1, 2, 3},
    int_arr = {1, 2, 3},
    };
    ints_of_ints: Ints[] = {
        {num_ints = 3, int_arr = {1, 2, 3}},
        {num_ints = 2, int_ptr = (:int[2]){-1, -2}},
    };
}

func test_complete() {
    x := 0;
    // x := 1;
    // x := 2;
    y := 0;
    @complete
    if (x == 0) {
        y = 1;
    } else if (x == 1) {
        y = 2;
    }

    x = 1;
    // x = -1;
    #assert(x >= 0);

    x = 0;
    // x = 1;
    // x = 2;
    @complete
    switch (x) {
    case 0:
        y = 3;
    case 1:
        y = 4;
    }
}

func test_limits() {
    char_min := CHAR_MIN;
    char_max := CHAR_MAX;
    schar_min := SCHAR_MIN;
    schar_max := SCHAR_MAX;
    uchar_min := UCHAR_MIN;
    uchar_max := UCHAR_MAX;
    short_min := SHORT_MIN;
    short_max := SHORT_MAX;
    ushort_min := USHORT_MIN;
    ushort_max := USHORT_MAX;
    int_min := INT_MIN;
    int_max := INT_MAX;
    uint_min := UINT_MIN;
    uint_max := UINT_MAX;
    long_min := LONG_MIN;
    long_max := LONG_MAX;
    ulong_min := ULONG_MIN;
    ulong_max := ULONG_MAX;
    llong_min := LLONG_MIN;
    llong_max := LLONG_MAX;
    ullong_min := ULLONG_MIN;
    ullong_max := ULLONG_MAX;

    wchar_min := WCHAR_MIN;
    wchar_max := WCHAR_MAX;

    int8_min := INT8_MIN;
    int8_max := INT8_MAX;
    uint8_min := UINT8_MIN;
    uint8_max := UINT8_MAX;
    int16_min := INT16_MIN;
    int16_max := INT16_MAX;
    uint16_min := UINT16_MIN;
    uint16_max := UINT16_MAX;
    int32_min := INT32_MIN;
    int32_max := INT32_MAX;
    uint32_min := UINT32_MIN;
    uint32_max := UINT32_MAX;
    int64_min := INT64_MIN;
    int64_max := INT64_MAX;
    uint64_min := UINT64_MIN;
    uint64_max := UINT64_MAX;

    usize_min := USIZE_MIN;
    usize_max := USIZE_MAX;
    ssize_min := SSIZE_MIN;
    ssize_max := SSIZE_MAX;
    uintptr_min := UINTPTR_MIN;
    uintptr_max := UINTPTR_MAX;
    intptr_min := INTPTR_MIN;
    intptr_max := INTPTR_MAX;
}

func test_alignof() {
    i := 42;
    n1 := alignof(i);
    n2 := alignof(i+1);
    n3 := alignof(ullong);
    n4 := alignof(:int*);
}

struct BufHdr {
    cap, len: usize;
    buf: char[1];
    //    buf: char[];
    //    buf: char[0];
}

func test_offsetof() {
    n := offsetof(BufHdr, buf);
    //    n = offsetof(BufHdr, foo);
}

struct Thing {
    a: int;
}

var thing: Thing;

func returns_ptr(): Thing* {
    return &thing;
}

func returns_ptr_to_const(): Thing const* {
    return &thing;
}

func test_lvalue() {
    returns_ptr().a = 5;
    //    returns_ptr_to_const().a = 5;
    p := returns_ptr_to_const();
    //    p.a = 42;
}

struct T1 {
    a: int;
    b: char;
}

#static_assert(sizeof(T1) == 8)

struct T2 {
    x, y: T1;
}

#static_assert(sizeof(T2) == 16)

func test_if() {
    if (1) {
    }
    //    if (x := Thing{}) {
    //    }
    if (x := 42) {
    }
    if (x := 42; x >= 0) {
    }
    if (x: int = 42; x >= 0) {
    }
}

func test_reachable() {
    //    bogus_func();
}

func test_os_arch() {
    libc.printf("Target operating system: %s\n", IONOS);
    libc.printf("Target machine architecture: %s\n", IONARCH);
}

struct Bar {
    rc: int;
}

struct Foo {
    bar: Bar* const;
}

func test_const_ptr_deref() {
    bar := Bar{rc = 42};
    foo := Foo{bar = &bar};
    i := foo.bar.rc;
}

enum TokenKind {
    TOKEN_NONE,
    TOKEN_INT,
    TOKEN_STR,
}

struct Token {
    kind: TokenKind;
    union {
        struct {
            val: llong;
            mod: uint16;
        }
        str: char const*;
    }
}

func test_token() {
    t1 := Token{kind = TOKEN_INT, val = 42};
    t2 := Token{kind = TOKEN_STR, str = "Hello"};
}

#static_assert(offsetof(Token, val) == offsetof(Token, str))
#static_assert(sizeof(Token) == 24)

typedef my_time_t = C.time_t;

func test_type_path() {
    t1 := libc.time(NULL);
    t2: C.time_t = C.time(NULL);
    t3: my_time_t = C.time(NULL);
}

func test_aprintf() {
    a: char*;
    aprintf(a, "Hello");
    aprintf(a, ", world! %d", 42);
    len := alen(a);
    printf("%s\n", a);
}

struct float2 {
    x, y: float;
}

func test_dynamic_arrays() {
    a: int[] = anew(0);
    apush(a, 42);
    apush(a, 36);
    len := alen(a);
    cap := acap(a);
    for (i := 0; i < alen(a); i++) {
        libc.printf("a[%d] = %d\n", i, a[i]);
    }
    asetcap(a, 1);
    apush(a, 82);
    for (i := 0; i < alen(a); i++) {
        libc.printf("a[%d] = %d\n", i, a[i]);
    }
    apop(a);
    for (i := 0; i < alen(a); i++) {
        libc.printf("a[%d] = %d\n", i, a[i]);
    }
    b: int[];
    apush(b, 1);
    apush(b, 2);
    acat(a, b);
    afree(b);
    afree(a);
    apush(a, 1);
    apush(a, 2);
    afill(a, 0, 15);
    for (i := 0; i < alen(a); i++) {
        printf("a[%d] = %d\n", i, a[i]);
    }
    acatn(a, a + 1, 15);
    for (i := 0; i < alen(a); i++) {
        printf("a[%d] = %d\n", i, a[i]);
    }
    adeli(a, 1);
    adeln(a, 2, 10);
    for (i := 0; i < alen(a); i++) {
        printf("a[%d] = %d\n", i, a[i]);
    }
    afree(a);
    c: float2*;
    // c: {float, float}*;
    apush(c, {1.0, 2.0});
    afill(c, {3.14, 1.42}, 100);
    for (i := 0; i < alen(c); i++) {
        printf("[%d] {%f, %f}\n", i, c[i][0], c[i][1]);
    }
}

func test_index_arrays() {
    // key sets
    block: char[1024];
    temp := temp_allocator(block, sizeof(block));
    a: int[];
    aindexv(a, hash_index(&temp));
    aputv(a, 42);
    aputv(a, 36);
    for (i := 0; i < alen(a); i++) {
        printf("%d\n", a[i]);
    }
    aputv(a, 25);
    adelv(a, 42);
    for (i := 0; i < alen(a); i++) {
        printf("%d\n", a[i]);
    }
    printf("%llu %llu %llu\n", agetvi(a, 42), agetvi(a, 36), agetvi(a, 123));
    #assert(!agetv(a, 42));
    #assert(!agetv(a, 123));
    #assert(agetv(a, 25));
    #assert(agetv(a, 36));
    // key-value maps
    m: {char, int}[];
    aindex(m, hash_index(&temp));
    aput(m, 'x', 42);
    aput(m, 'p', 36);
    for (i := 0; i < alen(m); i++) {
        printf("[%d] %c => %d\n", i, m[i][0], m[i][1]);
    }
    adel(m, 'x');
    j := ageti(m, 'p');
    printf("[%llu] %c => %d\n", j, m[j][0], m[j][1]);
    aput(m, 'm', 38);
    adel(m, 'p');
    for (i := 0; i < alen(m); i++) {
        printf("[%d] %c => %d\n", i, m[i][0], m[i][1]);
    }
    b: {int, int, int}[];
    aputv(b, {1, 2, 3});
    l := agetvi(b, {1, 2, 3});
    l = agetvi(b, {4, 5, 6});
    aputv(b, {4, 5, 6});
    l = agetvi(b, {4, 5, 6});
    l = agetvi(b, {7, 8, 9});
    // c: {{char, int}, float}[];
    // aput(c, {1, 2}, 3.14);
    // error: Key type of aput must contain no padding
    // d: {char, int}[];
    // aputv(d, {1, 2});
    // error: Base type of aputv must contain no padding
}

func test_hashing() {
    a: int*;
    aindexv(a, hash_index(0));
    for (x := 0; x < 11; x++) {
        aputv(a, x);
    }
    for (x := 0; x < 11; x++) {
        i := agetvi(a, x);
        #assert(i < alen(a) && a[i] == x);
    }
    aputv(a, 11);
    for (x := 0; x < 11; x++) {
        i := agetvi(a, x);
        #assert(i < alen(a) && a[i] == x);
    }
    i := agetvi(a, 11);
    #assert(i < alen(a) && a[i] == 11);
}

struct Node {
    id: int;
}

func test_tuples() {
    p: {float, float};
    p[0] = 1.23;
    p[1] = 3.14;
    counts: {Node*, int}*;
    // ...
}

struct FuncPair {
    f: func(int, int): int;
    g: func(int, int): int;
}

func funcpair_f(x: int, y: int): int {
    return x + y;
}

func test_func_interning() {
    p: FuncPair;
    p.f = p.g;
    p.f = funcpair_f;
}

func test_void_ptr_arithmetic() {
    p: void*;
    p = p + 1;
    p = 1 + p;
    q: int*;
    // n := p - q;
    r: char*;
    n := p - r;
    n = r - p;
    b := p <= r;
    b = r <= p;
    // b = p <= q;
    p += 1;
}

@foreign
func foreign_func(): int const* {
    #foreign(preamble = "int const *foreign_func(void) { return 0; }");
    return 0;
}

@foreign
struct ForeignStruct {
    x: int;
    y: int const;
}

#foreign(preamble = "typedef struct ForeignStruct { int x; const int y; } ForeignStruct;")

func test_foreign_const() {
    p := foreign_func();
    s: ForeignStruct;
    s.x = 42;
//    s.y = 35;
}

func test_const_implicit() {
    p: int const*;
    q: int*;
    q = p;
}

func test_intern() {
    a := intern("Per");
    b := intern("Per");
    #assert(a == b);
    c := intern("Ion");
    #assert(a != c);
    d := intern("Ion");
    #assert(c == d);
}

func test_namemap() {
    block: char[10 * 1024];
    temp := temp_allocator(block, sizeof(block));
    namemap: NameMap;
    namemap_init(&namemap, &temp);
    a := namemap_get(&namemap, "Per");
    b := namemap_get(&namemap, "Per");
    #assert(a == b);
    c := namemap_get(&namemap, "Ion");
    #assert(a != c);
    d := namemap_get(&namemap, "Ion");
    #assert(c == d);
}

func test_aget() {
    a: {int, int}[];
    aput(a, 251182, 37);
    i := ageti(a, 251182);
    j := ageti(a, 1234);
    x := aget(a, 251182);
    y := aget(a, 1234);
    adefault(a, -1);
    y = aget(a, 1234);
    if (p := agetp(a, 251182)) {
        z := *p;
    }
}

@threadlocal
var tls_test = 42;

func test_threadlocal() {
    tls_test = 123;
}

struct Person {
    name: char const*;
    age: int;
}

struct MyAllocator {
    base: Allocator;
    id: int;
}

func my_alloc(allocator: void*, size: usize, align: usize): void* {
    self: MyAllocator* = allocator;
    printf("MyAllocator: %d\n", self.id);
    return libc.malloc(size);
}

func my_allocator(id: int): MyAllocator {
    return {{my_alloc, noop_free}, id};
}

func test_new() {
    // new(allocator_ptr)[len] lvalue
    a := new Person{};
    b := new *a;
    c := new Person{name = "Per", age = 37};
    current := current_allocator;
    trace := trace_allocator(current);
    current_allocator = &trace;
    ptrs: void*[];
    for (i := 0; i < 32; i++) {
        apush(ptrs, alloc(16 + i, 8));
    }
    for (i := 0; i < alen(ptrs); i++) {
        free(ptrs[i]);
    }
    afree(ptrs);
    current_allocator = current;
    block: char[32 * 1024];
    temp := temp_allocator(block, sizeof(block));
    e := new(&temp) Person{name = "Per", age = 37};
    mark := temp_begin(&temp);
    arena := arena_allocator(&temp);
    // arena_free(&arena);
    temp_end(&temp, mark);
    g := new(&temp) float{1.42};
}

func test_panic(ctx: Recover*, i: int) {
    if (i == 0) {
        panic(ctx);
    } else {
        test_panic(ctx, i-1);
    }
}

struct OtherStruct {
    x: int;

}

typedef SillyTuple = {double, double};

struct SillyStruct {
    x: SillyTuple;
//    x: {double, int};
}

var x: SillyStruct;

func test_tuple_deps() {
    x;
}

// imagine you're writing top-level parse() entry point to the parser module
func test_disposable(): File* {
    ctx: Recover;
    if (recover(&ctx)) {
        file1 := open("dummy.txt");
        secure(file1);
        file2 := open("dummy.txt");
        secure(file2);
        test_panic(&ctx, 10);
        #assert(0);
        // panic(&ctx);
//        unsecure(file1);
        dispose(&ctx);
        return file1;
    }
    #assert(alen(disposables) == 0);
    return 0;
}

func test_autohash() {
    a: int[];
    for (i := 0; i < 100; i++) {
        aputv(a, i);
    }
    #assert(ahdr(a).index.indexer == hash_indexer);
    for (i := 0; i < 100; i++) {
        #assert(agetv(a, i));
    }
    m: {int, int}[];
    for (i := 0; i < 100; i++) {
        aput(m, i, i);
    }
    #assert(ahdr(m).index.indexer == hash_indexer);
    for (i := 0; i < 100; i++) {
        #assert(aget(m, i) == i);
    }
}

func test_undef() {
    x: int = undef;
    block: char[1024];
    temp := temp_allocator(block, sizeof(block));
    a: int* = new undef;
    b: int* = new(&temp) undef;
    c: int[] = new[1024] undef;
    d: int[] = new(&temp)[1024] undef;
    e: int[] = {1, 2, 3, 4};
    f := new[4] e;
    for (i := 0; i < 4; i++) {
        printf("%d ", f[i]);
    }
}

func f_incomplete_array_param(a: int[]) {
}

func f_pointer_param(a: int*) {
}

func test_incomplete_array_param() {
	f := f_incomplete_array_param;
	f = f_pointer_param;
	g := f_pointer_param;
	g = f_incomplete_array_param;
}

func main(argc: int, argv: char**): int {
    if (argv == 0) {
        libc.printf("argv is null\n");
    }
    test_nonmodifiable();
    test_const_ptr_deref();
    test_limits();
    test_va_list("whatever", char(123), int(123123), llong(123123123123));
    test_os_arch();
    test_packages();
    test_if();
    test_modify();
    test_lvalue();
    test_alignof();
    test_offsetof();
    test_complete();
    test_compound_literals();
    test_loops();
    test_sizeof();
    test_assign();
    test_enum();
    test_arrays();
    test_cast();
    test_init();
    test_lits();
    test_const();
    test_bool();
    test_ops();
    test_typeinfo();
    test_reachable();
    test_type_path();
    test_push();
    test_va_type("%d", 42);
    test_void();
    test_dynamic_arrays();
    test_aprintf();
    test_index_arrays();
    test_tuples();
    test_func_interning();
    test_hashing();
    test_void_ptr_arithmetic();
    test_foreign_const();
    test_const_implicit();
    test_intern();
    test_namemap();
    test_threadlocal();
    test_new();
    test_disposable();
    test_aget();
    test_tuple_deps();
    test_autohash();
    test_undef();
    // gc();
    // C.getchar();
    subtest1.LIBC.getchar();
    return 0;
}
